// Code generated by MockGen. DO NOT EDIT.
// Source: example.go

// Package example is a generated GoMock package.
package example

import (
	gomock "github.com/golang/mock/gomock"
	testpb "github.com/higebu/matchers/testpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

// MockFoo is a mock of Foo interface
type MockFoo struct {
	ctrl     *gomock.Controller
	recorder *MockFooMockRecorder
}

// MockFooMockRecorder is the mock recorder for MockFoo
type MockFooMockRecorder struct {
	mock *MockFoo
}

// NewMockFoo creates a new mock instance
func NewMockFoo(ctrl *gomock.Controller) *MockFoo {
	mock := &MockFoo{ctrl: ctrl}
	mock.recorder = &MockFooMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFoo) EXPECT() *MockFooMockRecorder {
	return m.recorder
}

// Bar mocks base method
func (m *MockFoo) Bar(x []A) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar", x)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bar indicates an expected call of Bar
func (mr *MockFooMockRecorder) Bar(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockFoo)(nil).Bar), x)
}

// Baz mocks base method
func (m *MockFoo) Baz(msg *testpb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Baz", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Baz indicates an expected call of Baz
func (mr *MockFooMockRecorder) Baz(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Baz", reflect.TypeOf((*MockFoo)(nil).Baz), msg)
}

// Qux mocks base method
func (m *MockFoo) Qux(t *timestamppb.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qux", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Qux indicates an expected call of Qux
func (mr *MockFooMockRecorder) Qux(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qux", reflect.TypeOf((*MockFoo)(nil).Qux), t)
}
